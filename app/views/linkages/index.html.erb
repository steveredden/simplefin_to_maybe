<br>
<div class="top-pane">
  <h2 class="text-2xl font-semibold mb-4">Account Linkages</h2>
  <table class="bg-white shadow-md rounded-lg overflow-hidden">
    <thead>
      <tr class="bg-gray-200">
        <th class="py-2 px-4 border-b text-left">Enabled</th>
        <th class="py-2 px-4 border-b text-left">SimpleFIN Account</th>
        <th class="py-2 px-4 border-b text-center"></th>
        <th class="py-2 px-4 border-b text-left">Maybe Account</th>
        <th class="py-2 px-4 border-b text-left">Last Sync</th>
        <th class="py-2 px-4 border-b text-center"></th>
        <th class="py-2 px-4 border-b text-center"></th>
        <th class="py-2 px-4 border-b text-center"></th>
      </tr>
    </thead>
    <tbody>
      <% @linkages.order(:created_at).each do |linkage| %>
        <tr class="hover:bg-gray-100">
          <td class="py-2 px-4 border-b text-center">
            <%= form_with model: linkage, url: linkage_path(linkage), method: :patch, remote: true do |f| %>
              <label for="toggle-<%= linkage.id %>" class="flex items-center cursor-pointer">
                <div class="relative w-11 h-6">
                  <!-- Hidden field ensures false is sent when checkbox is unchecked -->
                  <%= f.hidden_field :enabled, value: "off" %>

                  <input type="checkbox" id="toggle-<%= linkage.id %>" name="linkage[enabled]" value="on"
                        class="sr-only peer" <%= 'checked="checked"' if linkage.enabled %> onchange="this.form.submit()">
          
                  <!-- Background track -->
                  <div class="block w-full h-full bg-gray-300 rounded-full peer-checked:bg-green-500 transition"></div>
          
                  <!-- Moving dot -->
                  <div class="absolute top-1/2 left-1 w-4 h-4 bg-white rounded-full shadow-md transition-transform duration-300 ease-in-out 
                              -translate-y-1/2 peer-checked:translate-x-5"></div>
                </div>
              </label>
            <% end %>
          </td>
          <td class="py-2 px-4 border-b"><%= linkage.simplefin_account.display_name %></td>
          <td class="py-2 px-4 border-b text-center">
            <i class="fas fa-link text-gray-600"></i>
          </td>
          <td class="py-2 px-4 border-b"><%= linkage.maybe_account.display_name %></td>
          <td class="py-2 px-4 border-b">
            <% last_synced_at = linkage.last_sync %>
            <span id="last-sync-<%= linkage.id %>">
              <%= last_synced_at.nil? ? "Never" : local_time(last_synced_at).strftime("%Y-%m-%d %I:%M:%S %p") %>
            </span>
          </td>
          <td class="py-2 px-4 border-b text-center">
            <button class="sync-now-btn bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400" data-linkage-id="<%= linkage.id %>">
              Sync Now
            </button>
          </td>
          <td class="py-2 px-4 border-b text-center">
            <img id="sync-spinner-<%= linkage.id %>" src="<%= asset_path('fe718d-transparent-spinner.gif') %>" alt="Loading..." class="sync-status" style="display: none;" data-spinner-url="<%= asset_path('fe718d-transparent-spinner.gif') %>" data-checkmark-url="<%= asset_path('blue-done.png') %>"></img>
          </td>
          <td class="py-2 px-4 border-b text-center">
            <%= button_to linkage_path(linkage), method: :delete, data: {}, class: "text-blue-500 hover:text-blue-700" do %>
              <i class="fas fa-trash-alt"></i>
            <% end %>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<div class="bottom-pane mt-8">
  <h2 class="text-2xl font-semibold mb-4">Create New Linkage</h2>
  <table class="bg-white shadow-md rounded-lg overflow-hidden">
    <thead>
      <tr class="bg-gray-200">
        <th class="py-2 px-4 border-b text-left">SimpleFIN Account</th>
        <th class="py-2 px-4 border-b text-center"></th>
        <th class="py-2 px-4 border-b text-left">Maybe Account</th>
        <th class="py-2 px-4 border-b text-center"></th>
      </tr>
    </thead>
    <tbody>
      <%= form_with model: @linkage, url: linkages_path, method: :post, remote: true do |form| %>
        <tr class="border-t hover:bg-gray-50">
          <td class="py-2 px-4">
            <% if @simplefin_accounts.present? %>
              <%= form.select :simplefin_account_id, options_for_select(@simplefin_accounts.order(:display_name).map { |account|
                display_text = "#{account.display_name} (...#{account.identifier.to_s.last(4)})"
                [display_text, account.id] }, @linkage.simplefin_account_id), prompt: simplefin_account_prompt, class: "block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" %>
            <% else %>
              <p>All accounts are linked!</p>
            <% end %>
          </td>
          <td class="py-2 px-4 text-center">
            <i class="fas fa-lock-open text-gray-500" />
          </td>
          <td class="py-2 px-4">
            <% if @maybe_accounts.present? %>
              <%= form.select :maybe_account_id, options_for_select(@maybe_accounts.order(:display_name).map { |account| [account.display_name, account.id] }, @linkage.maybe_account_id), prompt: maybe_account_prompt, class: "block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500" %>
            <% else %>
              <p><a href="/settings" class="text-blue-500 hover:text-blue-700">There are no unlinked accounts! Click here to configure.</a></p>
            <% end %>
          </td>
          <td class="py-2 px-4 text-center">
            <%= form.submit "Save", class: "bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400", id: 'save-button', disabled: true %>
          </td>
        </tr>
      <% end %>    
    </tbody>
  </table>
</div>
<br><br><br><br><br><br><br>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const syncButtons = document.querySelectorAll('.sync-now-btn');
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");
    let pollingInterval = null;
    let syncingLinkages = new Set(); // Track ongoing syncs

    function checkSyncStatus() {
      if (syncingLinkages.size === 0) {
        clearInterval(pollingInterval);
        pollingInterval = null;
        return;
      }

      syncingLinkages.forEach(linkageId => {
        fetch(`/linkages/${linkageId}/sync_status`)
          .then(response => response.json())
          .then(data => {
            const spinner = document.getElementById(`sync-spinner-${linkageId}`);
            const lastSyncElement = document.getElementById(`last-sync-${linkageId}`);

            if (data.sync_status === "complete") {

              const spinner = document.getElementById(`sync-spinner-${linkageId}`);
              // Change spinner to checkmark image
              spinner.src = spinner.dataset.checkmarkUrl;

              const date = new Date(data.last_sync);

              const year = date.getFullYear();
              const month = String(date.getMonth() + 1).padStart(2, '0');
              const day = String(date.getDate()).padStart(2, '0');

              let hours = date.getHours();
              const minutes = String(date.getMinutes()).padStart(2, '0');
              const seconds = String(date.getSeconds()).padStart(2, '0');

              const ampm = hours >= 12 ? 'PM' : 'AM';
              hours = hours % 12 || 12; // convert 0 -> 12 for AM

              const formattedTime = `${year}-${month}-${day} ${String(hours).padStart(2, '0')}:${minutes}:${seconds} ${ampm}`;

              lastSyncElement.innerHTML = formattedTime;

              syncingLinkages.delete(linkageId); // Remove from tracking
              setTimeout(() => {
                spinner.style.display = "none";
                spinner.src = spinner.dataset.spinnerUrl;
              }, 3000);
            } else {
              spinner.style.display = "inline-block";
            }

            // If all syncs are complete, stop polling
            if (syncingLinkages.size === 0 && pollingInterval) {
              clearInterval(pollingInterval);
              pollingInterval = null;
            }
          })
          .catch(error => console.error("Error fetching sync status:", error));
      });
    }

    syncButtons.forEach(button => {

      button.addEventListener('click', function() {
        const linkageId = button.getAttribute('data-linkage-id');
        const spinner = document.getElementById(`sync-spinner-${linkageId}`);
        const enabledCheckbox = document.getElementById(`toggle-${linkageId}`);

        // Check if the linkage is enabled
        if (enabledCheckbox && enabledCheckbox.checked) {

          spinner.style.display = 'inline-block';
          syncingLinkages.add(linkageId); // Track this linkage as syncing

          fetch(`/linkages/${linkageId}/sync`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              "X-Requested-With": "XMLHttpRequest",
              "X-CSRF-Token": csrfToken,
            },
            body: JSON.stringify({ linkage_id: linkageId }),
          })
          .catch(error => console.error('Error syncing:', error));

          // Start polling if not already running
          if (!pollingInterval) {
            pollingInterval = setInterval(checkSyncStatus, 2000);
          }
        }
      });
    });

    // Select the form elements for the "Save" button logic
    const simplefinSelect = document.querySelector('select[name="linkage[simplefin_account_id]"]');
    const maybeSelect = document.querySelector('select[name="linkage[maybe_account_id]"]');
    const saveButton = document.getElementById('save-button');

    if (!simplefinSelect || !maybeSelect || !saveButton) {
      console.warn("One or more elements missing. Check your HTML.");
      return;
    }

    // Function to check if the "Save" button should be enabled or disabled
    function toggleSaveButton() {
      if (simplefinSelect.value === "" || maybeSelect.value === "") {
        saveButton.disabled = true;
        console.info("save button disabled");
      } else {
        saveButton.disabled = false;
        console.info("save button enabled");
      }
    }

    // Add event listeners to both select fields
    simplefinSelect.addEventListener('change', toggleSaveButton);
    maybeSelect.addEventListener('change', toggleSaveButton);

    // Initial check on page load
    toggleSaveButton();
  });
</script>
