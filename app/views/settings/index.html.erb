<br>
<h2 class="text-2xl font-semibold mb-4">SimpleFIN Settings</h2>
<table class="bg-white shadow-md rounded-lg overflow-hidden">
  <thead>
    <tr class="bg-gray-200">
      <th class="py-2 px-4 border-b text-left">Setting</th>
      <th class="py-2 px-4 border-b text-center"></th>
      <th class="py-2 px-4 border-b text-right">Value</th>
      <th class="py-2 px-4 border-b text-center"></th>
    </tr>
  </thead>
  <tbody>
    <% ["simplefin_username", "simplefin_password"].each do |key| %>
      <% setting = Setting.find_by(key: key) %>
      <% if setting %>
        <tr class="hover:bg-gray-100">
          <td class="py-2 px-4 border-b text-left"><%= setting.display_name %></td>
          <td class="py-2 px-4 border-b text-center"><i class="fas fa-arrows-left-right text-gray-500" /></td>
          <td class="py-2 px-4 border-b text-right">
            <% if setting.value.present? %>
              *********
            <% else %>
              <span class="blinking-undefined">undefined</span>
            <% end %>
          </td>
          <td class="py-2 px-4 border-b text-center">
            <button class="openModalBtn bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400" 
              display-name="<%= setting.display_name %>"
              data-key="<%= setting.key %>"
              data-value="<%= setting.value %>">
              Edit
            </button>
          </td>
        </tr>
      <% end %>
    <% end %>
    <tr class="hover:bg-gray-100">
      <td class="py-2 px-4 border-b text-left">Accounts Retrieved</td>
      <td class="py-2 px-4 border-b text-center"><i class="fas fa-arrow-right text-gray-500" /></td>
      <td class="py-2 px-4 border-b text-right">
        <%= link_to accounts_path, id: "simplefin-count-display", class: "text-blue-500 hover:text-blue-700 p-1.5" do %>
          <%= Account.where(account_type: "simplefin").count %>
        <% end %>
      </td>
      <td class="py-2 px-4 border-b text-center"><button class="text-white px-4 py-2 rounded">|</button></td>
    </tr>
  </tbody>
</table>

<br>
<button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400" id="test_simplefin_button">Retrieve SimpleFIN Accounts</button>
<img id="simplefin_loading_spinner" style="display: none;" src="<%= asset_path('fe718d-transparent-spinner.gif') %>" alt="Loading..." class="spinner" />
<br><div id="simplefin_test_result"></div><br><br>

<!-- Database Settings Table -->
<h2 class="text-2xl font-semibold mb-4">Maybe Settings</h2>
<table class="bg-white shadow-md rounded-lg overflow-hidden">
  <thead>
    <tr class="bg-gray-200">
      <th class="py-2 px-4 border-b text-left">Setting</th>
      <th class="py-2 px-4 border-b text-center"></th>
      <th class="py-2 px-4 border-b text-right">Value</th>
      <th class="py-2 px-4 border-b text-center"></th>
    </tr>
  </thead>
  <tbody>
  <% settings = [
    { maybe_postgres_host: "127.0.0.1" },
    { maybe_postgres_port: "5432" },
    { maybe_postgres_db: "maybe" },
    { maybe_postgres_user: "maybe" }] %>
  <% settings.each do |hash| %>
    <% hash.each do |key, default| %>
      <% setting = Setting.find_by(key: key.to_s) %>
      <% value = setting&.value.presence || default %>
      <% is_default = setting&.value.blank? %>
      <tr class="hover:bg-gray-100">
        <td class="py-2 px-4 border-b text-left"><%= setting&.display_name || key.to_s.humanize %></td>
        <td class="py-2 px-4 border-b text-center"><i class="fas fa-arrows-left-right text-gray-500" /></td>
        <td class="py-2 px-4 border-b text-right <%= "text-gray-400" if is_default %>">
          <%= value %>
        </td>
        <td class="py-2 px-4 border-b text-center">
          <button class="openModalBtn bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400" 
            display-name="<%= setting&.display_name || key.to_s.humanize %>" 
            data-key="<%= key %>" 
            data-value="<%= value %>">
            Edit
          </button>
        </td>
      </tr>
    <% end %>
  <% end %>
    <% setting = Setting.find_by(key: "maybe_postgres_password") %>
    <% if setting %>
      <tr class="hover:bg-gray-100">
        <td class="py-2 px-4 border-b text-left"><%= setting.display_name %></td>
        <td class="py-2 px-4 border-b text-center"><i class="fas fa-arrows-left-right text-gray-500" /></td>
        <td class="py-2 px-4 border-b text-right">
          <% if setting.value.present? %>
            *********
          <% else %>
            <span class="blinking-undefined">undefined</span>
          <% end %>
        </td>
        <td class="py-2 px-4 border-b text-center">
          <button class="openModalBtn bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400"
            display-name="<%= setting.display_name %>"
            data-key="<%= setting.key %>"
            data-value="<%= setting.value %>">
            Edit
          </button>
        </td>
      </tr>
    <% end %>
    <tr class="hover:bg-gray-100">
      <td class="py-2 px-4 border-b text-left">Accounts Retrieved</td>
      <td class="py-2 px-4 border-b text-center"><i class="fas fa-arrow-right text-gray-500" /></td>
      <td class="py-2 px-4 border-b text-right">
        <%= link_to accounts_path, id: "maybe-count-display", class: "text-blue-500 hover:text-blue-700 p-1.5" do %>
          <%= Account.where(account_type: "maybe").count %>
        <% end %>
      </td>
      <td class="py-2 px-4 border-b text-center"><button class="text-white px-4 py-2 rounded">|</button></td>
    </tr>
  </tbody>
</table>

<br>
<button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400" id="test_maybe_button">Retrieve Maybe Accounts</button>
<img id="maybe_loading_spinner" style="display: none;" src="<%= asset_path('fe718d-transparent-spinner.gif') %>" alt="Loading..." class="spinner" />
<br><div id="maybe_test_result"></div><br><br>

<!-- Other Settings Table -->
<h2 class="text-2xl font-semibold mb-4">Scheduling Settings</h2>
<table class="bg-white shadow-md rounded-lg overflow-hidden">
  <thead>
    <tr class="bg-gray-200">
      <th class="py-2 px-4 border-b text-left">Setting</th>
      <th class="py-2 px-4 border-b text-center"></th>
      <th class="py-2 px-4 border-b text-right">Value</th>
      <th class="py-2 px-4 border-b text-center"></th>
    </tr>
  </thead>
  <tbody>
    <% settings = [{ lookback_days: "7" },{ synchronization_schedule: "0 5,23 * * *" }] %>
    <% settings.each do |hash| %>
      <% hash.each do |key, default| %>
        <% setting = Setting.find_by(key: key.to_s) %>
        <% value = setting&.value.presence || default %>
        <% if key.to_s == "synchronization_schedule" %>
          <% @cron_expression = value.to_s %>
        <% end %>
        <% is_default = setting&.value.blank? %>
        <tr class="hover:bg-gray-100">
          <td class="py-2 px-4 border-b text-left"><%= setting&.display_name || key.to_s.humanize %></td>
          <td class="py-2 px-4 border-b text-center"><i class="fas fa-arrows-left-right text-gray-500" /></td>
          <td class="py-2 px-4 border-b text-right <%= "text-gray-400" if is_default %>">
            <%= value %>
          </td>
          <td class="py-2 px-4 border-b text-center">
            <button class="openModalBtn bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400" 
              display-name="<%= setting&.display_name || key.to_s.humanize %>" 
              data-key="<%= key %>" 
              data-value="<%= value %>">
              Edit
            </button>
          </td>
        </tr>
      <% end %>
    <% end %>
    <tr class="hover:bg-gray-100">
    <td class="py-2 px-4 border-b text-left">Last Sync Execution</td>
    <td class="py-2 px-4 border-b text-center"><i class="fas fa-arrow-right text-gray-500" /></td>
    <td class="py-2 px-4 border-b text-right">
      <%= link_to "https://crontab.guru/##{@cron_expression.gsub(" ", "_")}", target: "_blank", rel: "noopener noreferrer", class: "text-blue-500 hover:text-blue-700 p-1.5" do %>
        <%= Fugit::Cron.parse(@cron_expression).previous_time.strftime("%Y-%m-%d %I:%M:%S %p UTC") %>
      <% end %>
    </td>
    <td class="py-2 px-4 border-b text-center"><button class="text-white px-4 py-2 rounded">|</button></td>
  </tr>
  <tr class="hover:bg-gray-100">
    <td class="py-2 px-4 border-b text-left">Next Sync Execution</td>
    <td class="py-2 px-4 border-b text-center"><i class="fas fa-arrow-right text-gray-500" /></td>
    <td class="py-2 px-4 border-b text-right">
      <%= link_to "https://crontab.guru/##{@cron_expression.gsub(" ", "_")}", target: "_blank", rel: "noopener noreferrer", class: "text-blue-500 hover:text-blue-700 p-1.5" do %>
        <%= Fugit::Cron.parse(@cron_expression).next_time.strftime("%Y-%m-%d %I:%M:%S %p UTC") %>
      <% end %>
    </td>
    <td class="py-2 px-4 border-b text-center"><button class="text-white px-4 py-2 rounded">|</button></td>
  </tr>
  </tbody>
</table>


<!-- Modal Structure -->
<div id="modal" class="modal fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center z-50 hidden">
  <div class="modal-content bg-white p-6 rounded-lg shadow-lg max-w-lg w-full">
    <span id="closeModalBtn" class="close-btn absolute top-0 right-0 mt-4 mr-4 text-2xl text-gray-500 cursor-pointer hover:text-gray-700">&times;</span>
    <h2 id="modalHeader" class="text-2xl font-semibold mb-4">Edit Setting</h2>
    <form id="editForm" action="<%= settings_path %>" method="POST" class="space-y-4">
      <input type="hidden" name="_method" value="PATCH"> <!-- This makes it act as PATCH -->
      <input type="hidden" id="modal-key" name="setting[key]"> <!-- Store setting key -->
      <input type="text" id="modal-value" name="setting[value]" placeholder="Enter new value" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
      <button type="submit" id="save-btn" class="save-btn bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
        Save
      </button>
    </form>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {

    const modal = document.getElementById("modal");
    const closeModalBtn = document.getElementById("closeModalBtn");
    const openModalBtns = document.querySelectorAll(".openModalBtn");
    const modalHeader = document.getElementById("modalHeader");
    const modalValueInput = document.getElementById("modal-value");
    const modalKeyInput = document.getElementById("modal-key");

    let currentSettingKey = "";  // Track which setting is being edited

    // Open modal when Edit link is clicked
    openModalBtns.forEach(btn => {
      btn.addEventListener("click", function (event) {
        event.preventDefault();
        const settingKey = btn.getAttribute("data-key");
        const settingValue = btn.getAttribute("data-value");
        const displayName = btn.getAttribute("display-name");

        // Pre-fill modal with current setting data
        modalHeader.innerText = `Edit ${displayName}`;
        modalKeyInput.value = settingKey;  // Set the hidden input with the setting key
        currentSettingKey = settingKey;  // Save the setting key for later use
        modalValueInput.value = settingValue;  // Set the input field with the current value

        modal.style.display = "block";  // Show the modal
        setTimeout(() => {
          modalValueInput.focus()
        }, 50)
      });
    });

    // Close modal when close button is clicked
    closeModalBtn.onclick = function () {
      modal.style.display = "none";
    };

    // Close modal if clicked outside the modal content
    window.onclick = function (event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    };

    // Handle the Save button click
    document.getElementById("save-btn").addEventListener("click", function (event) {
      event.preventDefault();  // Prevent form submission (well handle via AJAX)

      const newValue = modalValueInput.value;  // Get the updated value from the input field
      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");

      // Send the updated value to the server via AJAX
      fetch(`/settings/${currentSettingKey}`, {
        method: "PATCH",  // Use PATCH to update the existing setting
        headers: {
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest",
          "X-CSRF-Token": csrfToken,
        },
        body: JSON.stringify({
          value: newValue,  // Send the new value to the server
        }),
      })
        .then((response) => response.json()) // Expect a JSON response
        .then((data) => {
          if (data.success) {
            modal.style.display = "none";  // Close the modal
            window.location.reload()
          } else {
            alert("Error updating setting.");
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          alert("An error occurred while updating the setting.");
        });
    });

    function setupButton(buttonId, spinnerId, resultId, url, countId) {
      const button = document.getElementById(buttonId);
      const spinner = document.getElementById(spinnerId);
      const resultContainer = document.getElementById(resultId);
      const countContainer = document.getElementById(countId);
      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");

      button.addEventListener("click", function (event) {
        event.preventDefault(); // Prevent default link behavior
        spinner.style.display = "block";  // Show the spinner

        // Make an AJAX request
        fetch(url, {
          method: "GET",
          headers: {
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": csrfToken,
          }
        })
        .then(response => response.json())
        .then(data => {
          resultContainer.innerText = data.output;
          countContainer.innerText = data.account_count;
        })
        .catch(error => {
          console.error("Error:", error);
          resultContainer.innerText = "An error occurred.";
        })
        .finally(() => {
          spinner.style.display = "none";  // Hide the spinner when the request completes
        });
      });
    }

    // Initialize for both SimpleFIN and Maybe buttons
    setupButton("test_simplefin_button", "simplefin_loading_spinner", "simplefin_test_result", "<%= test_simplefin_path %>", "simplefin-count-display");
    setupButton("test_maybe_button", "maybe_loading_spinner", "maybe_test_result", "<%= test_maybe_path %>", "maybe-count-display");
  });
</script>
